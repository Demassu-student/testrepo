// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 578p2KiWp3ZSUFPY7FrhK3
// Component: GCTBXpXYeaF
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavigationBar from "../../NavigationBar"; // plasmic-import: BLtbByl5tB5/component
import Select from "../../Select"; // plasmic-import: 3Vr7VM3BiE8vGJ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../new_ones/plasmic_new_ones.module.css"; // plasmic-import: 578p2KiWp3ZSUFPY7FrhK3/projectcss
import sty from "./PlasmicUxWritingBlogExercise2.module.css"; // plasmic-import: GCTBXpXYeaF/css
import Divider2Icon from "../new_ones/icons/PlasmicIcon__Divider2"; // plasmic-import: wszRZDHrfCJaE9/icon
import CopyIcon from "../new_ones/icons/PlasmicIcon__Copy"; // plasmic-import: 3hWh_eWxbClQvX/icon
import SocialIconIcon from "../new_ones/icons/PlasmicIcon__SocialIcon"; // plasmic-import: 4p046xg_E92q0B/icon
import SocialIcon2Icon from "../new_ones/icons/PlasmicIcon__SocialIcon2"; // plasmic-import: cVIq4NUX5C4QL_/icon
import Group9Icon from "../new_ones/icons/PlasmicIcon__Group9"; // plasmic-import: RDagWvZuGPzEwr/icon

export const PlasmicUxWritingBlogExercise2__VariantProps = new Array();

export const PlasmicUxWritingBlogExercise2__ArgProps = new Array("children3");

function PlasmicUxWritingBlogExercise2__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"blogBody"}
            data-plasmic-override={overrides.blogBody}
            hasGap={true}
            className={classNames(projectcss.all, sty.blogBody)}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"48px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"1440px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/portfolio_bener/images/frame211.svg",
                fullWidth: 1440,
                fullHeight: 48,
                aspectRatio: 30
              }}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headingAndSupportingText"}
                  data-plasmic-override={overrides.headingAndSupportingText}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.headingAndSupportingText
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"headingAndSubheading"}
                    data-plasmic-override={overrides.headingAndSubheading}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.headingAndSubheading
                    )}
                  >
                    <div
                      data-plasmic-name={"subheading"}
                      data-plasmic-override={overrides.subheading}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.subheading
                      )}
                    >
                      {"Submitted 15 Feb 2022"}
                    </div>

                    <div
                      data-plasmic-name={"heading"}
                      data-plasmic-override={overrides.heading}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heading
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 600 }}
                        >
                          {"UX Writing Hub"}
                        </span>
                        <React.Fragment>{" ‚úçüèª "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"Exercise 02"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Tupu
                    )}
                  >
                    {
                      "This exercise is part of UX Writing Satnight Camp in UX Writing Club Indonesia. It is a place to learn UX Writing in which there are Lecture / Workshop / Talkshow / Quest Classes every week available for everyone to join."
                    }
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              hasGap={true}
              className={classNames(projectcss.all, sty.container2)}
            >
              <div
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                className={classNames(projectcss.all, sty.content2)}
              >
                <div
                  data-plasmic-name={"frame220"}
                  data-plasmic-override={overrides.frame220}
                  className={classNames(projectcss.all, sty.frame220)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame219"}
                    data-plasmic-override={overrides.frame219}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame219)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c74Bi
                      )}
                    >
                      {"Task"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c1Opa
                      )}
                    >
                      {"Menyederhanakan copy"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame112"}
                    data-plasmic-override={overrides.frame112}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame112)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j66Wf
                      )}
                    >
                      {
                        "Aplikasi: Spotify atau Tokopedia\r\nReference: Required\nSource: Required\r\nKomponen UI: Error message\r\nBahasa: Indonesia\r\nBatas karakter maksimum: Jumlah karakter copy proposalmu tidak harus sama dengan jumlah karakter copy aslinya."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"categories"}
                    data-plasmic-override={overrides.categories}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.categories)}
                  >
                    <div
                      data-plasmic-name={"badge"}
                      data-plasmic-override={overrides.badge}
                      className={classNames(projectcss.all, sty.badge)}
                    >
                      <div
                        data-plasmic-name={"badgeBase"}
                        data-plasmic-override={overrides.badgeBase}
                        className={classNames(projectcss.all, sty.badgeBase)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lLkA
                          )}
                        >
                          {"UX Writing"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"badge2"}
                      data-plasmic-override={overrides.badge2}
                      className={classNames(projectcss.all, sty.badge2)}
                    >
                      <div
                        data-plasmic-name={"badgeBase2"}
                        data-plasmic-override={overrides.badgeBase2}
                        className={classNames(projectcss.all, sty.badgeBase2)}
                      >
                        <div
                          data-plasmic-name={"text2"}
                          data-plasmic-override={overrides.text2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text2
                          )}
                        >
                          {"Occam‚Äôs razor"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"badge3"}
                      data-plasmic-override={overrides.badge3}
                      className={classNames(projectcss.all, sty.badge3)}
                    >
                      <div
                        data-plasmic-name={"badgeBase3"}
                        data-plasmic-override={overrides.badgeBase3}
                        className={classNames(projectcss.all, sty.badgeBase3)}
                      >
                        <div
                          data-plasmic-name={"text3"}
                          data-plasmic-override={overrides.text3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text3
                          )}
                        >
                          {"Error message"}
                        </div>
                      </div>
                    </div>

                    {false ? (
                      <div
                        data-plasmic-name={"badge4"}
                        data-plasmic-override={overrides.badge4}
                        className={classNames(projectcss.all, sty.badge4)}
                      >
                        <div
                          data-plasmic-name={"badgeBase4"}
                          data-plasmic-override={overrides.badgeBase4}
                          className={classNames(projectcss.all, sty.badgeBase4)}
                        >
                          <div
                            data-plasmic-name={"text4"}
                            data-plasmic-override={overrides.text4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text4
                            )}
                          >
                            {"Presentation"}
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              hasGap={true}
              className={classNames(projectcss.all, sty.section)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container3"}
                data-plasmic-override={overrides.container3}
                hasGap={true}
                className={classNames(projectcss.all, sty.container3)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"content3"}
                  data-plasmic-override={overrides.content3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content3)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"richText"}
                    data-plasmic-override={overrides.richText}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.richText)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section2"}
                      data-plasmic-override={overrides.section2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section2)}
                    >
                      <div
                        data-plasmic-name={"heading2"}
                        data-plasmic-override={overrides.heading2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading2
                        )}
                      >
                        {"What is Occam‚Äôs Razor?"}
                      </div>

                      <div
                        data-plasmic-name={"intro"}
                        data-plasmic-override={overrides.intro}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.intro
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              'Occam‚Äôs Razor is a problem-solving principle that "entities should not be multiplied beyond necessity". It is generally understood in the sense that with competing theories or explanations, the simpler one, for example a model with fewer parameters, is to be preferred.\nBasically, Occam‚Äôs Razor is used to do something in the simplest manner possible because simpler is usually better. Occam‚Äôs Razor can be adopted as a guiding principle that informs our decisions and keeps us from reaching for a complex solution when a simpler one is sufficient.\nBy only introducing complexity when it is necessary, we can ensure that our designs stay lean and void of superfluous elements that do not add value to the user‚Äôs experience.\n\nSource: \n'
                            }
                          </React.Fragment>
                          <ul
                            data-plasmic-name={"ul"}
                            data-plasmic-override={overrides.ul}
                            className={classNames(
                              projectcss.all,
                              projectcss.ul,
                              sty.ul
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li___6QEup
                              )}
                            >
                              {
                                'Jon Yablonski, 2017, "Designing with Occam\'s Razor: How a classic problem-solving principle can help improve our designs"'
                              }
                            </li>

                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__uuiqA
                              )}
                            >
                              {"Occam's razor at wikipedia"}
                            </li>
                          </ul>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>

                      <Divider2Icon
                        className={classNames(projectcss.all, sty.svg__vcb2Q)}
                        role={"img"}
                      />
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section3"}
                      data-plasmic-override={overrides.section3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section3)}
                    >
                      <div
                        data-plasmic-name={"heading3"}
                        data-plasmic-override={overrides.heading3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading3
                        )}
                      >
                        {"Task Reference"}
                      </div>

                      <div
                        data-plasmic-name={"paragraph"}
                        data-plasmic-override={overrides.paragraph}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.paragraph
                        )}
                      >
                        {"Sederhanakan copy di dalam kotak merah"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"richTextImg"}
                      data-plasmic-override={overrides.richTextImg}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.richTextImg)}
                    >
                      <div
                        data-plasmic-name={"image"}
                        data-plasmic-override={overrides.image}
                        className={classNames(projectcss.all, sty.image)}
                      />

                      <div
                        data-plasmic-name={"text5"}
                        data-plasmic-override={overrides.text5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text5
                        )}
                      >
                        {"Image courtesy of UX Writing Club Indonesia"}
                      </div>
                    </p.Stack>

                    <Divider2Icon
                      className={classNames(projectcss.all, sty.svg__dy5Mp)}
                      role={"img"}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section4"}
                      data-plasmic-override={overrides.section4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section4)}
                    >
                      <div
                        data-plasmic-name={"heading4"}
                        data-plasmic-override={overrides.heading4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading4
                        )}
                      >
                        {"Original Copy"}
                      </div>

                      <div
                        data-plasmic-name={"paragraph2"}
                        data-plasmic-override={overrides.paragraph2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.paragraph2
                        )}
                      >
                        {
                          "Versi asli: Koneksi timeout, silahkan coba beberapa saat lagi. Kode error: \r\nVersi sederhana: Koneksi terputus, periksa koneksi internet lalu coba lagi. (58)\r"
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section5"}
                      data-plasmic-override={overrides.section5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section5)}
                    >
                      <div
                        data-plasmic-name={"heading5"}
                        data-plasmic-override={overrides.heading5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading5
                        )}
                      >
                        {"Kata apa yang menurutmu rumit?"}
                      </div>

                      <div
                        data-plasmic-name={"paragraph3"}
                        data-plasmic-override={overrides.paragraph3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.paragraph3
                        )}
                      >
                        {
                          "‚ÄúKoneksi timeout‚Äù karena terjemahan ke indonesianya dari ‚Äúconnection timeout‚Äù namun tetap ada ‚Äútimeout‚Äù yang mana istilah bahasa inggris ini relatif teknikal dan asing. Saya sendiri harus google dahulu baru mengerti maksudnya apa. yang mana perlu diperjelas lagi masalahnya apa dan darimana.\n\n‚ÄúSilahkan coba beberapa saat lagi‚Äù\r\nApakah dengan menunggu beberapa saat masalah akan selesai? karena user sudah menunggu dengan membaca error message-nya yang mana user hanya perlu periksa internetnya lalu mencobanya lagi persis seperti CTA button copynya.\r\n\n‚ÄúKode error:‚Äù\r\nKarena tidak diperlukan dan terlalu robotic, copy yang tidak informatif akan membuat user pun bingung, jika mengharuskan googling dahulu baru bisa mengerti, apakah si user akan balik lagi?."
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section6"}
                      data-plasmic-override={overrides.section6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section6)}
                    >
                      <div
                        data-plasmic-name={"heading6"}
                        data-plasmic-override={overrides.heading6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading6
                        )}
                      >
                        {"Microcopy Proposal"}
                      </div>

                      <div
                        data-plasmic-name={"paragraph4"}
                        data-plasmic-override={overrides.paragraph4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.paragraph4
                        )}
                      >
                        {
                          "Tidak ada koneksi internet, hubungkan koneksi internetmu lalu coba lagi. (71)"
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section7"}
                      data-plasmic-override={overrides.section7}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section7)}
                    >
                      <div
                        data-plasmic-name={"heading7"}
                        data-plasmic-override={overrides.heading7}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading7
                        )}
                      >
                        {"Copy Reasoning"}
                      </div>

                      <div
                        data-plasmic-name={"paragraph5"}
                        data-plasmic-override={overrides.paragraph5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.paragraph5
                        )}
                      >
                        {
                          "Dari artikel markey.id, ‚ÄúTimeout‚Äù adalah server terlalu lama membalas permintaan data yang dibuat dari perangkat lain. Menurut saya frasa ‚Äúkoneksi timeout‚Äù sendiri perlu diperjelas lagi permasalahnya dan skenarionya, karena bisa saja koneksi terhubung namun koneksi lambat ataupun tidak ada internet. Oleh karena itu, Saya memakai ‚ÄúTidak ada koneksi internet‚Äù karena lebih menjelaskan masalah yaitu ‚Äútidak ada‚Äù dan ‚Äúinternet‚Äù juga tetap mengarahkan user untuk memeriksa status internet perangkatnya dengan solusi. Juga, saya menambahkan ‚Äúmu‚Äù agar tetap personal. Selanjutnya, solusi yang dapat user lakukan adalah periksa koneksi internet lalu merefresh halamannya. Jadi saya menulisnya ‚Äúhubungkan koneksi internet dan coba lagi‚Äù. Kata ‚Äúcoba lagi‚Äù sangat pas untuk copy karena sama dengan CTA buttonnya yang mungkin dapat reducing user‚Äôs cognitive load."
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section8"}
                      data-plasmic-override={overrides.section8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section8)}
                    >
                      <div
                        data-plasmic-name={"heading8"}
                        data-plasmic-override={overrides.heading8}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading8
                        )}
                      >
                        {"Reference"}
                      </div>

                      <div
                        data-plasmic-name={"paragraph6"}
                        data-plasmic-override={overrides.paragraph6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.paragraph6
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__eYb1G
                            )}
                            component={Link}
                            href={
                              "https://uxdesign.cc/writing-clearer-error-messages-d57d6f388140"
                            }
                            platform={"nextjs"}
                          >
                            {"Source1"}
                          </p.PlasmicLink>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link___8FnOb
                            )}
                            component={Link}
                            href={
                              "https://medium.com/@thomasfuchs/how-to-write-an-error-message-883718173322"
                            }
                            platform={"nextjs"}
                          >
                            {"Source2"}
                          </p.PlasmicLink>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__udsJq
                            )}
                            component={Link}
                            href={
                              "https://medium.com/s/user-friendly/the-art-of-the-error-message-9f878d0bff80"
                            }
                            platform={"nextjs"}
                          >
                            {"Source3"}
                          </p.PlasmicLink>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__nrGnX
                            )}
                            component={Link}
                            href={
                              "https://medium.muz.li/ux-copy-writing-or-the-middle-child-of-ux-design-468e90dd2034"
                            }
                            platform={"nextjs"}
                          >
                            {"Source4"}
                          </p.PlasmicLink>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"section9"}
                      data-plasmic-override={overrides.section9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.section9)}
                    >
                      <Divider2Icon
                        className={classNames(projectcss.all, sty.svg___60VY)}
                        role={"img"}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"authorAndSocialLinks"}
                        data-plasmic-override={overrides.authorAndSocialLinks}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.authorAndSocialLinks
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"avatarLabelGroup"}
                          data-plasmic-override={overrides.avatarLabelGroup}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.avatarLabelGroup
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"avatar"}
                              data-plasmic-override={overrides.avatar}
                              className={classNames(projectcss.all, sty.avatar)}
                            />
                          ) : null}

                          <div
                            data-plasmic-name={"textAndSupportingText"}
                            data-plasmic-override={
                              overrides.textAndSupportingText
                            }
                            className={classNames(
                              projectcss.all,
                              sty.textAndSupportingText
                            )}
                          >
                            <div
                              data-plasmic-name={"text6"}
                              data-plasmic-override={overrides.text6}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text6
                              )}
                            >
                              {"Demas Bermani Surya"}
                            </div>

                            <div
                              data-plasmic-name={"supportingText"}
                              data-plasmic-override={overrides.supportingText}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.supportingText
                              )}
                            >
                              {"Aspiring UI/UX Designer"}
                            </div>
                          </div>
                        </p.Stack>

                        {false ? (
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"socialLinks"}
                            data-plasmic-override={overrides.socialLinks}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.socialLinks
                            )}
                          >
                            <div
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(projectcss.all, sty.button)}
                            >
                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"buttonBase"}
                                data-plasmic-override={overrides.buttonBase}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.buttonBase
                                )}
                              >
                                <CopyIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__suPat
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"text7"}
                                  data-plasmic-override={overrides.text7}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text7
                                  )}
                                >
                                  {"Copy link"}
                                </div>
                              </p.Stack>
                            </div>

                            <div
                              data-plasmic-name={"button2"}
                              data-plasmic-override={overrides.button2}
                              className={classNames(
                                projectcss.all,
                                sty.button2
                              )}
                            >
                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"buttonBase2"}
                                data-plasmic-override={overrides.buttonBase2}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.buttonBase2
                                )}
                              >
                                <SocialIconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__exuUy
                                  )}
                                  role={"img"}
                                />
                              </p.Stack>
                            </div>

                            <div
                              data-plasmic-name={"button3"}
                              data-plasmic-override={overrides.button3}
                              className={classNames(
                                projectcss.all,
                                sty.button3
                              )}
                            >
                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"buttonBase3"}
                                data-plasmic-override={overrides.buttonBase3}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.buttonBase3
                                )}
                              >
                                <SocialIcon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ojG
                                  )}
                                  role={"img"}
                                />
                              </p.Stack>
                            </div>

                            <div
                              data-plasmic-name={"button4"}
                              data-plasmic-override={overrides.button4}
                              className={classNames(
                                projectcss.all,
                                sty.button4
                              )}
                            >
                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"buttonBase4"}
                                data-plasmic-override={overrides.buttonBase4}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.buttonBase4
                                )}
                              >
                                <div
                                  data-plasmic-name={"socialIcon"}
                                  data-plasmic-override={overrides.socialIcon}
                                  className={classNames(
                                    projectcss.all,
                                    sty.socialIcon
                                  )}
                                >
                                  <Group9Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__a07TJ
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </p.Stack>
                            </div>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            className={classNames("__wab_instance", sty.navigationBar)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <Select
                  className={classNames("__wab_instance", sty.select__v7Sjl)}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yKzEb
                      )}
                    >
                      {"Selected works"}
                    </div>
                  }
                  selectedContent={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vq4SD
                      )}
                    >
                      {"Selected works"}
                    </div>
                  }
                />
              ),

              value: args.children3
            })}
          </NavigationBar>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "blogBody",
    "img",
    "container",
    "content",
    "headingAndSupportingText",
    "headingAndSubheading",
    "subheading",
    "heading",
    "container2",
    "content2",
    "frame220",
    "frame219",
    "frame112",
    "categories",
    "badge",
    "badgeBase",
    "badge2",
    "badgeBase2",
    "text2",
    "badge3",
    "badgeBase3",
    "text3",
    "badge4",
    "badgeBase4",
    "text4",
    "section",
    "container3",
    "content3",
    "richText",
    "section2",
    "heading2",
    "intro",
    "ul",
    "section3",
    "heading3",
    "paragraph",
    "richTextImg",
    "image",
    "text5",
    "section4",
    "heading4",
    "paragraph2",
    "section5",
    "heading5",
    "paragraph3",
    "section6",
    "heading6",
    "paragraph4",
    "section7",
    "heading7",
    "paragraph5",
    "section8",
    "heading8",
    "paragraph6",
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon",
    "navigationBar"
  ],

  blogBody: [
    "blogBody",
    "img",
    "container",
    "content",
    "headingAndSupportingText",
    "headingAndSubheading",
    "subheading",
    "heading",
    "container2",
    "content2",
    "frame220",
    "frame219",
    "frame112",
    "categories",
    "badge",
    "badgeBase",
    "badge2",
    "badgeBase2",
    "text2",
    "badge3",
    "badgeBase3",
    "text3",
    "badge4",
    "badgeBase4",
    "text4",
    "section",
    "container3",
    "content3",
    "richText",
    "section2",
    "heading2",
    "intro",
    "ul",
    "section3",
    "heading3",
    "paragraph",
    "richTextImg",
    "image",
    "text5",
    "section4",
    "heading4",
    "paragraph2",
    "section5",
    "heading5",
    "paragraph3",
    "section6",
    "heading6",
    "paragraph4",
    "section7",
    "heading7",
    "paragraph5",
    "section8",
    "heading8",
    "paragraph6",
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  img: ["img"],
  container: [
    "container",
    "content",
    "headingAndSupportingText",
    "headingAndSubheading",
    "subheading",
    "heading"
  ],

  content: [
    "content",
    "headingAndSupportingText",
    "headingAndSubheading",
    "subheading",
    "heading"
  ],

  headingAndSupportingText: [
    "headingAndSupportingText",
    "headingAndSubheading",
    "subheading",
    "heading"
  ],

  headingAndSubheading: ["headingAndSubheading", "subheading", "heading"],
  subheading: ["subheading"],
  heading: ["heading"],
  container2: [
    "container2",
    "content2",
    "frame220",
    "frame219",
    "frame112",
    "categories",
    "badge",
    "badgeBase",
    "badge2",
    "badgeBase2",
    "text2",
    "badge3",
    "badgeBase3",
    "text3",
    "badge4",
    "badgeBase4",
    "text4"
  ],

  content2: [
    "content2",
    "frame220",
    "frame219",
    "frame112",
    "categories",
    "badge",
    "badgeBase",
    "badge2",
    "badgeBase2",
    "text2",
    "badge3",
    "badgeBase3",
    "text3",
    "badge4",
    "badgeBase4",
    "text4"
  ],

  frame220: [
    "frame220",
    "frame219",
    "frame112",
    "categories",
    "badge",
    "badgeBase",
    "badge2",
    "badgeBase2",
    "text2",
    "badge3",
    "badgeBase3",
    "text3",
    "badge4",
    "badgeBase4",
    "text4"
  ],

  frame219: ["frame219"],
  frame112: ["frame112"],
  categories: [
    "categories",
    "badge",
    "badgeBase",
    "badge2",
    "badgeBase2",
    "text2",
    "badge3",
    "badgeBase3",
    "text3",
    "badge4",
    "badgeBase4",
    "text4"
  ],

  badge: ["badge", "badgeBase"],
  badgeBase: ["badgeBase"],
  badge2: ["badge2", "badgeBase2", "text2"],
  badgeBase2: ["badgeBase2", "text2"],
  text2: ["text2"],
  badge3: ["badge3", "badgeBase3", "text3"],
  badgeBase3: ["badgeBase3", "text3"],
  text3: ["text3"],
  badge4: ["badge4", "badgeBase4", "text4"],
  badgeBase4: ["badgeBase4", "text4"],
  text4: ["text4"],
  section: [
    "section",
    "container3",
    "content3",
    "richText",
    "section2",
    "heading2",
    "intro",
    "ul",
    "section3",
    "heading3",
    "paragraph",
    "richTextImg",
    "image",
    "text5",
    "section4",
    "heading4",
    "paragraph2",
    "section5",
    "heading5",
    "paragraph3",
    "section6",
    "heading6",
    "paragraph4",
    "section7",
    "heading7",
    "paragraph5",
    "section8",
    "heading8",
    "paragraph6",
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  container3: [
    "container3",
    "content3",
    "richText",
    "section2",
    "heading2",
    "intro",
    "ul",
    "section3",
    "heading3",
    "paragraph",
    "richTextImg",
    "image",
    "text5",
    "section4",
    "heading4",
    "paragraph2",
    "section5",
    "heading5",
    "paragraph3",
    "section6",
    "heading6",
    "paragraph4",
    "section7",
    "heading7",
    "paragraph5",
    "section8",
    "heading8",
    "paragraph6",
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  content3: [
    "content3",
    "richText",
    "section2",
    "heading2",
    "intro",
    "ul",
    "section3",
    "heading3",
    "paragraph",
    "richTextImg",
    "image",
    "text5",
    "section4",
    "heading4",
    "paragraph2",
    "section5",
    "heading5",
    "paragraph3",
    "section6",
    "heading6",
    "paragraph4",
    "section7",
    "heading7",
    "paragraph5",
    "section8",
    "heading8",
    "paragraph6",
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  richText: [
    "richText",
    "section2",
    "heading2",
    "intro",
    "ul",
    "section3",
    "heading3",
    "paragraph",
    "richTextImg",
    "image",
    "text5",
    "section4",
    "heading4",
    "paragraph2",
    "section5",
    "heading5",
    "paragraph3",
    "section6",
    "heading6",
    "paragraph4",
    "section7",
    "heading7",
    "paragraph5",
    "section8",
    "heading8",
    "paragraph6",
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  section2: ["section2", "heading2", "intro", "ul"],
  heading2: ["heading2"],
  intro: ["intro", "ul"],
  ul: ["ul"],
  section3: ["section3", "heading3", "paragraph"],
  heading3: ["heading3"],
  paragraph: ["paragraph"],
  richTextImg: ["richTextImg", "image", "text5"],
  image: ["image"],
  text5: ["text5"],
  section4: ["section4", "heading4", "paragraph2"],
  heading4: ["heading4"],
  paragraph2: ["paragraph2"],
  section5: ["section5", "heading5", "paragraph3"],
  heading5: ["heading5"],
  paragraph3: ["paragraph3"],
  section6: ["section6", "heading6", "paragraph4"],
  heading6: ["heading6"],
  paragraph4: ["paragraph4"],
  section7: ["section7", "heading7", "paragraph5"],
  heading7: ["heading7"],
  paragraph5: ["paragraph5"],
  section8: ["section8", "heading8", "paragraph6"],
  heading8: ["heading8"],
  paragraph6: ["paragraph6"],
  section9: [
    "section9",
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  authorAndSocialLinks: [
    "authorAndSocialLinks",
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText",
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  avatarLabelGroup: [
    "avatarLabelGroup",
    "avatar",
    "textAndSupportingText",
    "text6",
    "supportingText"
  ],

  avatar: ["avatar"],
  textAndSupportingText: ["textAndSupportingText", "text6", "supportingText"],
  text6: ["text6"],
  supportingText: ["supportingText"],
  socialLinks: [
    "socialLinks",
    "button",
    "buttonBase",
    "text7",
    "button2",
    "buttonBase2",
    "button3",
    "buttonBase3",
    "button4",
    "buttonBase4",
    "socialIcon"
  ],

  button: ["button", "buttonBase", "text7"],
  buttonBase: ["buttonBase", "text7"],
  text7: ["text7"],
  button2: ["button2", "buttonBase2"],
  buttonBase2: ["buttonBase2"],
  button3: ["button3", "buttonBase3"],
  buttonBase3: ["buttonBase3"],
  button4: ["button4", "buttonBase4", "socialIcon"],
  buttonBase4: ["buttonBase4", "socialIcon"],
  socialIcon: ["socialIcon"],
  navigationBar: ["navigationBar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUxWritingBlogExercise2__ArgProps,
      internalVariantPropNames: PlasmicUxWritingBlogExercise2__VariantProps
    });

    return PlasmicUxWritingBlogExercise2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUxWritingBlogExercise2";
  } else {
    func.displayName = `PlasmicUxWritingBlogExercise2.${nodeName}`;
  }
  return func;
}

export const PlasmicUxWritingBlogExercise2 = Object.assign(
  // Top-level PlasmicUxWritingBlogExercise2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    blogBody: makeNodeComponent("blogBody"),
    img: makeNodeComponent("img"),
    container: makeNodeComponent("container"),
    content: makeNodeComponent("content"),
    headingAndSupportingText: makeNodeComponent("headingAndSupportingText"),
    headingAndSubheading: makeNodeComponent("headingAndSubheading"),
    subheading: makeNodeComponent("subheading"),
    heading: makeNodeComponent("heading"),
    container2: makeNodeComponent("container2"),
    content2: makeNodeComponent("content2"),
    frame220: makeNodeComponent("frame220"),
    frame219: makeNodeComponent("frame219"),
    frame112: makeNodeComponent("frame112"),
    categories: makeNodeComponent("categories"),
    badge: makeNodeComponent("badge"),
    badgeBase: makeNodeComponent("badgeBase"),
    badge2: makeNodeComponent("badge2"),
    badgeBase2: makeNodeComponent("badgeBase2"),
    text2: makeNodeComponent("text2"),
    badge3: makeNodeComponent("badge3"),
    badgeBase3: makeNodeComponent("badgeBase3"),
    text3: makeNodeComponent("text3"),
    badge4: makeNodeComponent("badge4"),
    badgeBase4: makeNodeComponent("badgeBase4"),
    text4: makeNodeComponent("text4"),
    section: makeNodeComponent("section"),
    container3: makeNodeComponent("container3"),
    content3: makeNodeComponent("content3"),
    richText: makeNodeComponent("richText"),
    section2: makeNodeComponent("section2"),
    heading2: makeNodeComponent("heading2"),
    intro: makeNodeComponent("intro"),
    ul: makeNodeComponent("ul"),
    section3: makeNodeComponent("section3"),
    heading3: makeNodeComponent("heading3"),
    paragraph: makeNodeComponent("paragraph"),
    richTextImg: makeNodeComponent("richTextImg"),
    image: makeNodeComponent("image"),
    text5: makeNodeComponent("text5"),
    section4: makeNodeComponent("section4"),
    heading4: makeNodeComponent("heading4"),
    paragraph2: makeNodeComponent("paragraph2"),
    section5: makeNodeComponent("section5"),
    heading5: makeNodeComponent("heading5"),
    paragraph3: makeNodeComponent("paragraph3"),
    section6: makeNodeComponent("section6"),
    heading6: makeNodeComponent("heading6"),
    paragraph4: makeNodeComponent("paragraph4"),
    section7: makeNodeComponent("section7"),
    heading7: makeNodeComponent("heading7"),
    paragraph5: makeNodeComponent("paragraph5"),
    section8: makeNodeComponent("section8"),
    heading8: makeNodeComponent("heading8"),
    paragraph6: makeNodeComponent("paragraph6"),
    section9: makeNodeComponent("section9"),
    authorAndSocialLinks: makeNodeComponent("authorAndSocialLinks"),
    avatarLabelGroup: makeNodeComponent("avatarLabelGroup"),
    avatar: makeNodeComponent("avatar"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text6: makeNodeComponent("text6"),
    supportingText: makeNodeComponent("supportingText"),
    socialLinks: makeNodeComponent("socialLinks"),
    button: makeNodeComponent("button"),
    buttonBase: makeNodeComponent("buttonBase"),
    text7: makeNodeComponent("text7"),
    button2: makeNodeComponent("button2"),
    buttonBase2: makeNodeComponent("buttonBase2"),
    button3: makeNodeComponent("button3"),
    buttonBase3: makeNodeComponent("buttonBase3"),
    button4: makeNodeComponent("button4"),
    buttonBase4: makeNodeComponent("buttonBase4"),
    socialIcon: makeNodeComponent("socialIcon"),
    navigationBar: makeNodeComponent("navigationBar"),
    // Metadata about props expected for PlasmicUxWritingBlogExercise2
    internalVariantProps: PlasmicUxWritingBlogExercise2__VariantProps,
    internalArgProps: PlasmicUxWritingBlogExercise2__ArgProps
  }
);

export default PlasmicUxWritingBlogExercise2;
/* prettier-ignore-end */
